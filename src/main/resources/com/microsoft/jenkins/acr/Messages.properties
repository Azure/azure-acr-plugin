#
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
#

plugin_displayName = Queue an ACR Quick Build

plugin_selectAzureCredential = --- Select Azure credentials ---
plugin_selectAzureResourceGroup = --- Select Azure resource group ---
plugin_selectAzureContainerRegistry = --- Select Azure Container Registry ---
plugin_noResources = --- No resource ---

error_cannotFindCred = Can't find credential in scope {0} with id: {1}
error_clientUnAuthed = Azure client is un-authorized.

context_endWithErrorState = Queue ACR build ended with {0}
context_finished = Finished ACR quick build

build_queueABuild = Queue a build to ACR {0}/{1} - {2}
build_finishQueueABuild = Finished queue a build to ACR: {0}
build_failQueueBuild = Failed to queue a build to ACR: {0}

log_getLogLink = Get log link: {0}
log_getLogError = Failed to get the build log: {0}
log_actionName = Download log

service_error = Azure Service {0} Error when taking action {1} : {2}

source_help = Source location should be a local directory or a git repo with ''.git'' end.

KubernetesDeploymentCommand_injectSecretName = Inject environment variable {0}={1}
KubernetesDeploymentCommand_deleteConfigFile = Delete Kubernetes management config file {0}
KubernetesDeploymentCommand_failedToDeleteFile = Failed to delete the file: {0}
KubernetesDeploymentCommand_secretNameTooLong = ERROR: Secret name is longer than 253 characters: {0}
KubernetesDeploymentCommand_illegalSecretName = ERROR: Illegal secret name: ''{0}''. See https://kubernetes.io/docs/concepts/overview/working-with-objects/names/ for reference.
KubernetesDeploymentCommand_tryToUpdateLoadBalancer = Try to update the health probes for load balancer {0}
KubernetesDeploymentCommand_updateProbe = Update health probe {0}: port from {1} to {2}

KubernetesClientUtil_loadingConfiguration = Loading configuration: {0}
KubernetesClientUtil_noResourceLoadedFrom = No resource loaded from: {0}
KubernetesClientUtil_appliedDeployment = Applied deployment: {0}
KubernetesClientUtil_appliedService = Applied service: {0}
KubernetesClientUtil_skipped = Skipped resource (supported type: deployment / service): {0}
KubernetesClientUtil_prepareSecretsWithName = Prepare Docker container registry secrets with name: {0}

ACSDeploymentContext_noConfigFilesFound = No config files matches the path pattern: {0}
ACSDeploymentContext_blankContainerService = Container service name is not configured
ACSDeploymentContext_blankContainerServiceType = Container service type is not specified
ACSDeploymentContext_selectAzureCredentials = --- Select Azure credentials ---
ACSDeploymentContext_selectAzureCredentialsFirst = --- Select Azure credentials first ---
ACSDeploymentContext_failedToLoadResourceGroups = *** Failed to load resource groups: {0} ***
ACSDeploymentContext_noResourceGroupFound = --- No resource group was found ---
ACSDeploymentContext_selectAzureCredentialsAndGroupFirst = --- Select Azure credentials and resource group first ---
ACSDeploymentContext_failedToLoadContainerServices = *** Failed to load container services: {0} ***
ACSDeploymentContext_noContainerServiceFound = --- No container service was found ---
ACSDeploymentContext_configFilePathsRequired = Config file path(s) is required.
ACSDeploymentContext_missingCredentials = ERROR: Azure credentials is not configured or found
ACSDeploymentContext_missingResourceGroup = ERROR: Azure resource group is not configured
ACSDeploymentContext_missingContainerServiceName = ERROR: Azure container service name is not configured
ACSDeploymentContext_missingSSHCredentials = ERROR: SSH credentials is not configured
ACSDeploymentContext_secretNameTooLong = ERROR: Secret name is longer than 253 characters.
ACSDeploymentContext_secretNameNotMatch = ERROR: Secret name should consist of lower case alphanumeric characters, ''-'', and ''.'' (pattern {0})
ACSDeploymentContext_onlyAbsolutePathAllowed = ERROR: Only absolute path is allowed.
ACSDeploymentContext_uriNotAccepted = WARNING: Special characters found in the path (e.g., single quote, backslash, nul, space and other characters that needs URI escaping), which may cause problem for the underlying Marathon resource loading.
ACSDeploymentContext_missingOrchestratorType = ERROR: No orchestrator type passed along with container service
ACSDeploymentContext_orchestratorNotSupported = ERROR: Container Service type {0} is not supported
ACSDeploymentContext_resourceGroupNotFound = ERROR: Resource group is not found from the given Azure credentials
ACSDeploymentContext_containerServiceNotFound = ERROR: Container service is not found from the given resource group
ACSDeploymentContext_containerServiceTypeMissMatch = ERROR: Container service orchestrator type doesn''t match Azure registry
ACSDeploymentContext_sshFailure = ERROR: Failed to SSH to master node: {0}
ACSDeploymentContext_validationError = ERROR: {0}
ACSDeploymentContext_validationSuccess = Successfully verified the configuration.

DeploymentChoiceCommand_containerServiceTypeNotFound = ERROR: Container service type was not found
DeploymentChoiceCommand_orchestratorNotSupported = ERROR: Deployment of container service with type {0} is not supported

EnablePortCommand_enabling = Enabling ports: {0}
EnablePortCommand_createSecurityRuleIfNeeded = Creating security rule for port {0} if needed.
EnablePortCommand_securityRuleFound = Security rule for port {0} was found.
EnablePortCommand_securityRuleNotFound = Security rule for port {0} not found.
EnablePortCommand_securityGroupNotFound = The security group associated to the agents was not found. Skip checking security rules.
EnablePortCommand_exceedMaxPriority = ERROR: Exceeded max priority for inbound security rules.
EnablePortCommand_creatingRule = Creating Security rule for port {0} with name: {1}
EnablePortCommand_allowTraffic = Allow traffic from the Internet to Public Agents port {0}
EnablePortCommand_createLBIfNeeded = Creating load balancer rule for port {0} if needed.
EnablePortCommand_missMatch = ERROR: Balancer configuration from template not matching previous configuration.
EnablePortCommand_lbFound = Load balancer rule for port {0} protocol {1} found.
EnablePortCommand_lbNotFound = The load balancer associated to the agents was not found. Skip checking load balancing rules.
EnablePortCommand_creatingLB = Creating load balancer rule for port {0} with name: {1}
EnablePortCommand_securityRuleAlreadyAllowAll = Security rule {0}({1}) allows all ports already.
EnablePortCommand_securityRuleInvalidDestinationPortRange = Invalid destination port range format: {0}
EnablePortCommand_securityRuleAlreadyAllowSingle = Security rule {0}({1}) allows port {2} already.

GetContainserServiceInfoCommand_getFQDN = Getting management public FQDN.
GetContainserServiceInfoCommand_containerServiceNotFound = Container Service {0} was not found in Resource Group {1}
GetContainserServiceInfoCommand_orchestratorType = Container service orchestrator type: {0}
GetContainserServiceInfoCommand_orchestratorTypeNotMatch = Container service {0} orchestrator type {1} does not match the configured type {2}
GetContainserServiceInfoCommand_fqdn = Management master FQDN: {0}
GetContainserServiceInfoCommand_adminUser = Management admin username: {0}

MarathonDeploymentCommand_configNotFound = No configuration found.
MarathonDeploymentCommand_copyConfigFileTo = Copying Marathon config file ''{0}'' to remote: {1}:{2}
MarathonDeploymentCommand_deletingApp = Deleting application with appId: {0} if it exists
MarathonDeploymentCommand_deployingApp = Deploying file ''{0}'' with appId {1} to marathon.
MarathonDeploymentCommand_removeTempFile = Remove temporary remote config file: {0}
MarathonDeploymentCommand_copyDockerCfgTo = Copy docker config {0} to {1}:{2}
MarathonDeploymentCommand_noAgentFound = No agent nodes found from the cluster.
MarathonDeploymentCommand_relativePathNotAllowed = Relative path is not allowed for the docker credentials archive path: {0}
MarathonDeploymentCommand_prepareDockerCredentialsFor = Prepare private Docker registry credentials for agent node {0}
MarathonDeploymentCommand_skipAsPathShared = Skip all the other nodes as the storage is shared.
MarathonDeploymentCommand_uriNotAccepted = WARNING: Special characters found in the path (e.g., single quote, backslash, nul, space and other characters that needs URI escaping), which may cause problems for the underlying Marathon resource loading.
MarathonDeploymentCommand_injectEnvironmentVar = Inject environment variable {0}={1}

MarathonDeploymentConfig_invalidConfigFormatNodeNotFound = Invalid config format in {0}: {1} node not found.

SwarmDeploymentCommand_copyConfigFileTo = Copying swarm config file ''{0}'' to remote: {1}:{2}
SwarmDeploymentCommand_removingDockerContainers = Removing docker containers
SwarmDeploymentCommand_updatingDockerContainers = Updating docker containers
SwarmDeploymentCommand_removeTempFile = Remove temporary remote config file: {0}

SwarmDeploymentConfig_invalidConfigFormatNodeNotFound = Invalid config format in {0}: {1} node not found.
SwarmDeploymentConfig_invalidPortDefinition = Invalid port definition {0} in {1}
SwarmDeploymentConfig_invalidPortSyntax = Invalid port syntax: {0}
SwarmDeploymentConfig_portRangesDontMatchInLength = Port ranges do not match in length: {0}
SwarmDeploymentConfig_noTargetPort = Not target port specified
SwarmDeploymentConfig_noPublishedPort = Not published port specified
SwarmDeploymentConfig_noAuthTokenFor = No authentication token found for {0}
SwarmDeploymentConfig_malformedAuthTokenFor = Malformed authentication token found for {0}
SwarmDeploymentConfig_addCredentialsFor = Add login credentials for registry {0}

AzureHelper_servicePrincipalNotFound = No service principal found for credentials ID: {0}

JSchClient_failedToCreateSession = Failed to create SSH session
JSchClient_copyFileTo = copy file {0} to {1}:{2}
JSchClient_copyFileFrom = copy file {0}:{1} to {2}
JSchClient_sftpError = sftp error
JSchClient_execCommand = ===> exec: {0}
JSchClient_commandExitStatus = <=== command exit status: {0}
JSchClient_errorExecution = Remote command exited with status code {0}
JSchClient_output = <=== {0}
JSchClient_failedExecution = Failed to execute command

AbstractBaseContext_error = ERROR:

ACSDeploymentBuilder_starting = Starting Azure Container Service / Kubernetes Service Deployment

ACSDeploymentBuilder_interrupted = Job execution was interrupted

JobContext_failedToGetEnv = Failed to get Job environment variables
JobContext_nullContent = null content returned
